[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[ext_resource path="res://addons/SimpleNormalOcean/0258.jpg" type="Texture" id=1]
[ext_resource path="res://addons/SimpleNormalOcean/0066.jpg" type="Texture" id=2]
[ext_resource path="res://addons/SimpleNormalOcean/0001.jpg" type="Texture" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque, cull_back, diffuse_burley,specular_schlick_ggx, world_vertex_coords;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_refraction;
uniform float refraction : hint_range(-16,16);
uniform vec4 refraction_texture_channel;
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal_1 : hint_normal;
uniform vec2 normal_1_time;
uniform sampler2D texture_normal_2 : hint_normal;
uniform vec2 normal_2_time;
uniform sampler2D texture_normal_3 : hint_normal;
uniform vec2 normal_3_time;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
//uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
//uniform vec3 uv2_offset;
uniform vec3 uv3_scale;
//uniform vec3 uv3_offset;
uniform float tile_size = 64.0;
uniform float global_zoom = 100.0;
uniform float murkiness = 2.0;

float blend_floats(float base, float blend) {
	return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));
}

vec3 blend_overlay(vec3 base, vec3 blend) {
	return vec3(blend_floats(base.r,blend.r),blend_floats(base.g,blend.g),blend_floats(base.b,blend.b));
}

void vertex() {
//	vec2 global_vertex = vec2(fmod(VERTEX.x, 10.0), fmod(VERTEX.z, 10.0));
//	vec2 global_vertex = (VERTEX).xz;
//	UV += global_vertex;
//	UV = global_vertex - 12.0*floor(global_vertex/12.0);
//	UV = global_vertex - floor(global_vertex);
//	UV=vec2(global_vertex.x/5.0-floor(global_vertex.x/5.0), global_vertex.y);
	vec2 global_offset = VERTEX.xz;
//	global_offset = vec2(0.0);
	vec2 uv1_offset = global_offset;
	vec2 uv2_offset = global_offset;
	vec2 uv3_offset = global_offset;
	UV=UV*(1.0/(uv1_scale)).xy+uv1_offset.xy+global_offset+UV*(1.0/(uv2_scale.xy))+uv2_offset.xy+global_offset+UV*(1.0/(uv3_scale.xy))+uv3_offset.xy+global_offset;
	UV=UV/global_zoom;
//	UV=UV*(uv1_scale.xy + vec2(sin(UV.x/20.0)*100.0, 0.0))+uv1_offset.xy+UV*uv2_scale.xy+uv2_offset.xy+UV*uv3_scale.xy+uv3_offset.xy;
//	UV = vec2(VERTEX.x/tile_size - floor(VERTEX.x/tile_size), VERTEX.z/tile_size - floor(VERTEX.z/tile_size));
//	UV=(vec2(VERTEX.x/tile_size, VERTEX.z/tile_size))*(uv1_scale.xy + vec2(sin(UV.x/20.0)*100.0, 0.0))+uv1_offset.xy+UV*uv2_scale.xy+uv2_offset.xy+UV*uv3_scale.xy+uv3_offset.xy;
//	VERTEX.y += sin(TIME + VERTEX.x);
}




void fragment() {
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).r;
	depth = depth * 2.0 - 1.0;
	depth = PROJECTION_MATRIX[3][2] / (depth + PROJECTION_MATRIX[2][2]);
	depth = depth + VERTEX.z;
	depth *= 0.5;
//	depth = 1.0 - depth;
//	vec2 global_vertex = (VERTEX).xz;
//	vec2 base_uv = global_vertex - 12.0*floor(global_vertex/12.0);
//	vec2 base_uv =vec2(global_vertex.x/5.0-floor(global_vertex.x/5.0), global_vertex.y);
	float time = 2.0*TIME + sin(TIME*0.5);
	vec2 base_uv = UV;
	ALBEDO = vec3(base_uv.x, base_uv.y, 0);
	vec4 albedo_tex = texture(texture_albedo,base_uv - vec2(VERTEX.x, VERTEX.z));
	ALBEDO = albedo.rgb * albedo_tex.rgb;	
//	ALBEDO = vec3(depth);
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec2 normal_1_uv = base_uv + vec2(time * normal_1_time.x, time * normal_1_time.y);
	vec2 normal_2_uv = base_uv + vec2(time * normal_2_time.x, time * normal_2_time.y);
//	vec2 normal_1_uv = base_uv + vec2(TIME * normal_1_time.x + (abs(sin(base_uv.y*0.2))*sin(base_uv.x*0.5))*4.0, TIME * normal_1_time.y);
//	vec2 normal_2_uv = base_uv + vec2(TIME * normal_2_time.x + cos(base_uv.x*0.5 + (TIME/5.0))*50.0, TIME * normal_2_time.y);
	vec2 normal_3_uv = base_uv + vec2(time * normal_3_time.x, time * normal_3_time.y) + 0.5*vec2(sin(TIME/2.0) * cos(base_uv.x), cos(TIME/2.0) * sin(base_uv.y));
//	NORMALMAP = texture(texture_normal_1,normal_1_uv).rgb + texture(texture_normal_2,normal_2_uv).rgb + texture(texture_normal_3,normal_3_uv).rgb;
//	NORMALMAP = texture(texture_normal_1,normal_1_uv).rgb + texture(texture_normal_2,normal_2_uv).rgb;
	NORMALMAP = blend_overlay(blend_overlay(texture(texture_normal_1,normal_1_uv).rgb, texture(texture_normal_2,normal_2_uv).rgb), texture(texture_normal_3,normal_3_uv).rgb);
//	NORMALMAP = texture(texture_normal_1, normal_1_uv).rgb;
//	NORMALMAP = texture(texture_normal_2, normal_2_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
	vec3 ref_normal = NORMAL;
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(vec4(NORMALMAP.rgb, 1.0),refraction_texture_channel) * refraction;
	float ref_amount = 1.0 - albedo.a * albedo_tex.a;
	EMISSION += (textureLod(SCREEN_TEXTURE,ref_ofs,ROUGHNESS * 8.0).rgb * ref_amount) * clamp(exp(-depth * murkiness), 0.0, 1.0);
//	ALBEDO *= 1.0 - ref_amount;
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 0, 0.168627, 0.215686, 0.643137 )
shader_param/specular = 0.57
shader_param/metallic = 0.35
shader_param/roughness = 0.12
shader_param/refraction = 0.21
shader_param/refraction_texture_channel = Plane( 0.09, 0.16, -0.11, -0.09 )
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_1_time = Vector2( -0.14, 0.058 )
shader_param/normal_2_time = Vector2( 0.015, -0.07 )
shader_param/normal_3_time = Vector2( -0.07, 0.07 )
shader_param/normal_scale = 0.4
shader_param/uv1_scale = Vector3( 10000, 10000, 1 )
shader_param/uv2_scale = Vector3( 10000, 1000, 1 )
shader_param/uv3_scale = Vector3( 1000, 1000, 1 )
shader_param/tile_size = 64.0
shader_param/global_zoom = 100.0
shader_param/murkiness = 0.19
shader_param/texture_normal_1 = ExtResource( 1 )
shader_param/texture_normal_2 = ExtResource( 2 )
shader_param/texture_normal_3 = ExtResource( 3 )
